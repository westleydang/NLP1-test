prince %>%
filter(decade != "NA")) %>%
group_by(decade, charted) %>%
summarize(n_songs = n())
prince %>%
filter(decade != "NA")) %>%
group_by(decade, charted) %>%
summarize(n_songs = n())
prince %>%
dplyr::filter(decade != "NA")) %>%
group_by(decade, charted) %>%
summarize(n_songs = n())
prince %>%
dplyr::filter(decade != "NA")) %>%
dplyr::group_by(decade, charted) %>%
summarize(n_songs = n())
prince %>%
# dplyr::filter(decade != "NA")) %>%
dplyr::group_by(decade, charted) %>%
summarize(n_songs = n())
prince %>%
filter(decade != "NA")) %>%
dplyr::group_by(decade, charted) %>%
summarize(n_songs = n()) %>%
ggplot(aes(x = decade, y = n_songs)) +
geom_bar(stat="identity")
prince %>%
# filter(decade != "NA")) %>%
dplyr::group_by(decade, charted) %>%
summarize(n_songs = n()) %>%
ggplot(aes(x = decade, y = n_songs)) +
geom_bar(stat="identity")
prince %>%
# filter(decade != "NA")) %>%
dplyr::group_by(decade, charted) %>%
summarize(n_songs = n()) %>%
ggplot(aes(x = decade, y = n_songs, group = charted)) +
geom_bar(stat="identity")
prince %>%
# filter(decade != "NA")) %>%
dplyr::group_by(decade, charted) %>%
summarize(n_songs = n()) %>%
ggplot(aes(x = decade, y = n_songs), group = charted) +
geom_bar(stat="identity")
prince %>%
# filter(decade != "NA")) %>%
dplyr::group_by(decade, charted) %>%
summarize(n_songs = n()) %>%
ggplot(aes(x = decade, y = n_songs), color = charted) +
geom_bar(stat="identity")
prince %>%
# filter(decade != "NA")) %>%
dplyr::group_by(decade, charted) %>%
summarize(n_songs = n()) %>%
ggplot(aes(x = decade, y = n_songs, color = charted)) +
geom_bar(stat="identity")
prince %>%
# filter(decade != "NA")) %>%
dplyr::group_by(decade, charted) %>%
summarize(n_songs = n()) %>%
ggplot(aes(x = decade, y = n_songs, fill = charted)) +
geom_bar(stat="identity")
prince %>%
filter(decade != "NA")) %>%
dplyr::group_by(decade, charted) %>%
summarize(n_songs = n()) %>%
ggplot(aes(x = decade, y = n_songs, fill = charted)) +
geom_bar(stat="identity")
install.packages("tidytext")
install.packages(stopwords)
install.packages("stopwords"
)
library(remotes)
install_github("juliasilge/tidytext")
install.packages("remotes")
library(remotes)
install_github("juliasilge/tidytext")
install.packages("tm")
ungroup(prince)
?ungroup
install.packages("tidytext")
install.packages("ISOcodes")
install.packages("stopwords")
install.packages(c("ade4", "assertthat", "backports", "bayesplot", "BDgraph", "BH", "BradleyTerry2", "brglm", "broom", "ca", "cairoDevice", "callr", "carData", "caret", "CDM", "checkmate", "circlize", "Ckmeans.1d.dp", "cli", "clipr", "coda", "colorspace", "corrr", "cubature", "Cubist", "curl", "CVST", "data.table", "ddalpha", "dendextend", "Deriv", "devtools", "digest", "dimRed", "dplyr", "DT", "dvmisc", "dygraphs", "e1071", "ellipsis", "emmeans", "evaluate", "fastICA", "flexmix", "foreach", "Formula", "fpc", "gbm", "gclus", "geometry", "GGally", "ggfortify", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "ggthemes", "git2r", "glasso", "GlobalOptions", "glue", "gower", "gplots", "gtools", "hash", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "httr", "huge", "hunspell", "igraph", "imputeR", "ipred", "iterators", "jomo", "jpeg", "jsonlite", "kableExtra", "keras", "kernlab", "knitr", "labelled", "lava", "lazyeval", "leaflet", "lme4", "lmtest", "magic", "markdown", "Matrix", "mboost", "mclust", "mice", "miniUI", "mirt", "mitools", "mlr", "ModelMetrics", "modeltools", "multcomp", "nloptr", "numDeriv", "openxlsx", "ordinal", "pamr", "pan", "parallelMap", "ParamHelpers", "parcoords", "party", "partykit", "pbapply", "permute", "pillar", "pkgconfig", "plot3D", "plotly", "pls", "polycor", "polynom", "prabclus", "pracma", "prettyunits", "pROC", "processx", "prodlim", "profileModel", "profvis", "progress", "psych", "purrr", "quadprog", "quantreg", "questionr", "qvcalc", "R6", "randomForest", "RANN", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppRoll", "readr", "readxl", "recipes", "registry", "reshape", "reticulate", "ridge", "rio", "rjson", "rlang", "rmarkdown", "RMySQL", "robustbase", "rsconnect", "rstudioapi", "rvest", "sandwich", "scales", "selectr", "sfsmisc", "sirt", "snakecase", "SnowballC", "sourcetools", "sp", "SparseM", "spData", "spls", "SQUAREM", "statmod", "stocks", "stringdist", "stringi", "strucchange", "survey", "TAM", "tensorflow", "tfruns", "TH.data", "tibble", "tidyr", "tidyselect", "tinytex", "tm", "tokenizers", "trimcluster", "TSP", "TTR", "utf8", "webshot", "whisker", "WRS2", "xfun", "xgboost", "XML", "xml2", "xtable", "xts", "zoo"))
install.packages("tidytext")
install.packages(c("boot", "foreign", "MASS", "nlme"))
library(tidytext)
t <- unnest_tokens(word, lyrics)
?unnest_tokens
undesirable_words <- c("prince", "chorus", "repeat", "lyrics",
"theres", "bridge", "fe0f", "yeah", "baby",
"alright", "wanna", "gonna", "chorus", "verse",
"whoa", "gotta", "make", "miscellaneous", "2",
"4", "ooh", "uurh", "pheromone", "poompoom", "3121",
"matic", " ai ", " ca ", " la ", "hey", " na ",
" da ", " uh ", " tin ", "  ll", "transcription",
"repeats")
stopwords
stop_words
t <- prince %>% unnest_tokens(words, lyrics)
#most of the libraries needed
library(dplyr) #data manipulation
library(ggplot2) #visualizations
library(gridExtra) #viewing multiple plots together
library(tidytext) #text mining
library(wordcloud2) #creative visualizations
t <- prince %>% unnest_tokens(words, lyrics)
View(t)
t <- prince %>%
unnest_tokens(words, lyrics) %>%
filter(!words %in% undesirable_words)
?anti_join
t <- prince %>%
unnest_tokens(words, lyrics) %>%
filter(!words %in% undesirable_words) %>%
anti_join(stop_words)
t <- prince %>%
unnest_tokens(words, lyrics) %>%
filter(!words %in% undesirable_words) %>%
anti_join(by = stop_words)
t <- prince %>%
unnest_tokens(words, lyrics) %>%
filter(!words %in% undesirable_words) %>%
anti_join(stop_word)
t <- prince %>%
unnest_tokens(words, lyrics) %>%
anti_join(stop_words) %>%
filter(!words %in% undesirable_words)
t <- prince %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words) %>%
filter(!words %in% undesirable_words)
t <- prince %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words) %>%
filter(!word %in% undesirable_words)
t <- prince %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words) %>%
filter(!word %in% undesirable_words) %>%
distinct()
t <- prince %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words) %>%
filter(!word %in% undesirable_words) %>%
distinct() %>%
filter(nchar(word) > 3)
?alias
head(sample(t, 20), 20)
head(sample(t$word, 20), 20)
t[word=="race"]
t[,word=="race"]
t[word=="race",]
t[word=="race"]
t[t$word == "race"]
t[t$word == "race",]
t[t$word == "race",] %>% select(song, word, year)
t %>%
filter(year == 2009) %>%
group_by(word) %>%
summarize(count = n())
t %>%
filter(year == 2009) %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(count)
t %>%
filter(year == 2009) %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(count, desc = T)
t %>%
filter(year == 2009) %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(count, descending = T)
t %>%
filter(year == 2009) %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(count)
t %>%
filter(year == 2009) %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(desc(count))
t %>%
# filter(year == 2009) %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(desc(count))
knitr::opts_chunk$set(echo = TRUE)
#most of the libraries needed
library(dplyr) #data manipulation
library(ggplot2) #visualizations
install.packages("ggplot2")
library(ggplot2) #visualizations
library(gridExtra) #viewing multiple plots together
library(tidytext) #text mining
library(wordcloud2) #creative visualizations
install.packages("gridExtra")
library(gridExtra) #viewing multiple plots together
d0 <- read.csv("prince_raw_data.csv", stringsAsFactors = F)
prince <- d0 %>%
select(lyrics = text, song, year, album, peak, us_pop = US.Pop, us_rnb = US.R.B)
# Clean up contractions
fix.contractions <- function(doc) {
# "won't" is a special case as it does not expand to "wo not"
doc <- gsub("won't", "will not", doc)
doc <- gsub("can't", "can not", doc)
doc <- gsub("n't", " not", doc)
doc <- gsub("'ll", " will", doc)
doc <- gsub("'re", " are", doc)
doc <- gsub("'ve", " have", doc)
doc <- gsub("'m", " am", doc)
doc <- gsub("'d", " would", doc)
# 's could be 'is' or could be possessive: it has no expansion
doc <- gsub("'s", "", doc)
return(doc)
}
prince$lyrics <- sapply(prince$lyrics, fix.contractions)
# function to remove special characters
removeSpecialChars <- function(x) gsub("[^a-zA-Z0-9 ]", " ", x)
# remove special characters
prince$lyrics <- sapply(prince$lyrics, removeSpecialChars)
# convert everything to lower case
prince$lyrics <- sapply(prince$lyrics, tolower)
prince <- prince %>%
mutate(decade =
ifelse(
prince$year %in% 1978:1979,
"1970s",
ifelse(
prince$year %in% 1980:1989,
"1980s",
ifelse(
prince$year %in% 1990:1999,
"1990s",
ifelse(
prince$year %in% 2000:2009,
"2000s",
ifelse(prince$year %in% 2010:2015, "2010s",
"NA")
)
)
)
))
#create the chart level column
prince <- prince %>%
mutate(chart_level =
ifelse(prince$peak %in% 1:10, "Top 10",
ifelse(prince$peak %in% 11:100, "Top 100", "Uncharted")))
#create binary field called charted showing if a song hit the charts at all
prince <- prince %>%
mutate(charted =
ifelse(prince$peak %in% 1:100, "Charted", "Uncharted"))
undesirable_words <- c(
"prince",
"chorus",
"repeat",
"lyrics",
"theres",
"bridge",
"fe0f",
"yeah",
"baby",
"alright",
"wanna",
"gonna",
"chorus",
"verse",
"whoa",
"gotta",
"make",
"miscellaneous",
"2",
"4",
"ooh",
"uurh",
"pheromone",
"poompoom",
"3121",
"matic",
" ai ",
" ca ",
" la ",
"hey",
" na ",
" da ",
" uh ",
" tin ",
"  ll",
"transcription",
"repeats"
)
t <- prince %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words) %>%
filter(!word %in% undesirable_words) %>%
distinct() %>%
filter(nchar(word) > 3)
head(sample(t$word, 20), 20)
t %>%
group_by(word) %>%
summarize(count = n())
t %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(desc(count))
t %>%
group_by(word, decade) %>%
summarize(count = n()) %>%
arrange(desc(count))
t %>%
filter(decade != NA) %>%
group_by(word, decade) %>%
summarize(count = n()) %>%
arrange(desc(count))
t %>%
filter(decade != NA) %>%
group_by(word, decade) %>%
summarize(count = n()) %>%
arrange(desc(count))
t %>%
filter(decade != "NA") %>%
group_by(word, decade) %>%
summarize(count = n()) %>%
arrange(desc(count))
?spread
library(tidyr)
install.packages("tidyr")
library(tidyr)
?spread
t %>%
filter(decade != "NA") %>%
group_by(word, decade) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
spread(key = decade, value = count)
t %>%
filter(decade != "NA") %>%
group_by(word, decade) %>%
summarize(count = n()) %>%
arrange(desc(count))
t %>%
filter(decade != "NA") %>%
summarize(count = n()) %>%
arrange(desc(count))
t %>%
filter(decade != "NA") %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(desc(count))
t %>%
filter(decade != "NA") %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
ggplot() + aes(x = word, y = count) +
geom_col()
?rank
t %>%
filter(decade != "NA") %>%
group_by(word) %>%
summarize(count = n()) %>%
top_n(10) %>%
arrange(desc(count)) %>%
ggplot() + aes(x = word, y = count) +
geom_col()
t %>%
filter(decade != "NA") %>%
group_by(word) %>%
summarize(count = n()) %>%
top_n(10) %>%
mutate(word = reorder(word, count)) %<%
arrange(desc(count)) %>%
ggplot() + aes(x = word, y = count) +
geom_col()
t %>%
filter(decade != "NA") %>%
group_by(word) %>%
summarize(count = n()) %>%
top_n(10) %>%
mutate(word = reorder(word, count)) %>%
arrange(desc(count)) %>%
ggplot() + aes(x = word, y = count) +
geom_col()
t %>%
filter(decade != "NA") %>%
group_by(word) %>%
summarize(count = n()) %>%
top_n(10) %>%
mutate(word = reorder(word, -count)) %>%
arrange(desc(count)) %>%
ggplot() + aes(x = word, y = count) +
geom_col()
t %>%
filter(decade != "NA") %>%
group_by(word) %>%
summarize(count = n()) %>%
top_n(10) %>%
mutate(word = reorder(word, -count)) %>%
arrange(desc(count)) %>%
ggplot() + aes(x = word, y = count) +
geom_col() + ggtitle("Most used words in Prince's lyrics")
t %>%
filter(decade != "NA") %>%
group_by(word, decade) %>%
summarize(count = n()) %>%
top_n(10) %>%
mutate(word = reorder(word, -count)) %>%
arrange(desc(count)) %>%
ggplot() + aes(x = word, y = count, group = decade) +
geom_col() + ggtitle("Most used words in Prince's lyrics")
t %>%
filter(decade != "NA") %>%
group_by(word, decade) %>%
summarize(count = n()) %>%
top_n(10) %>%
mutate(word = reorder(word, -count)) %>%
arrange(desc(count)) %>%
ggplot() + aes(x = word, y = count) +
geom_col() + ggtitle("Most used words in Prince's lyrics") +
facet_wrap(~decade)
t %>%
filter(decade != "NA") %>%
group_by(word, decade) %>%
summarize(count = n()) %>%
top_n(10) %>%
# mutate(word = reorder(word, -count)) %>%
arrange(desc(count)) %>%
ggplot() + aes(x = word, y = count) +
geom_col() + ggtitle("Most used words in Prince's lyrics") +
facet_wrap(~decade)
t %>%
filter(decade != "NA") %>%
group_by(word, decade) %>%
summarize(count = n()) %>%
group_by(decade) %>%
top_n(10)
t %>%
filter(decade != "NA") %>%
group_by(word, decade) %>%
summarize(count = n()) %>%
group_by(decade) %>%
top_n(10) %>%
# mutate(word = reorder(word, -count)) %>%
arrange(desc(count)) %>%
ggplot() + aes(x = word, y = count) +
geom_col() + ggtitle("Most used words in Prince's lyrics") +
facet_wrap(~decade)
t %>%
filter(decade != "NA") %>%
group_by(word, decade) %>%
summarize(count = n()) %>%
group_by(decade) %>%
top_n(10) %>%
# mutate(word = reorder(word, -count)) %>%
arrange(desc(count)) %>%
ggplot() + aes(x = word, y = count) +
geom_col() + ggtitle("Most used words in Prince's lyrics") +
coord_flip() +
facet_wrap(~decade)
t %>%
filter(decade != "NA") %>%
group_by(decade, word) %>%
summarize(count = n()) %>%
top_n(10)
t %>%
filter(decade != "NA") %>%
group_by(decade, word) %>%
summarize(count = n()) %>%
top_n(10) %>%
# mutate(word = reorder(word, -count)) %>%
arrange(desc(count)) %>%
ggplot() + aes(x = word, y = count) +
geom_col() + ggtitle("Most used words in Prince's lyrics") +
coord_flip() +
facet_wrap(~decade)
t %>%
filter(decade != "NA") %>%
group_by(decade, word) %>%
summarize(count = n()) %>%
top_n(10) %>%
# mutate(word = reorder(word, -count)) %>%
arrange(desc(count)) %>%
ggplot() + aes(x = word, y = count) +
geom_col() + ggtitle("Most used words in Prince's lyrics") +
coord_flip() +
facet_wrap(~decade, ncol = 5)
t %>%
filter(decade != "NA") %>%
group_by(word) %>%
summarize(count = n()) %>%
top_n(10) %>%
arrange(desc(count)) %>%
ggplot() + aes(x = word, y = count) +
geom_col() + ggtitle("Most used words in Prince's lyrics") +
coord_flip()
t %>%
filter(decade != "NA") %>%
group_by(word) %>%
summarize(count = n()) %>%
top_n(10) %>%
arrange(desc(count)) %>%
mutate(word = reorder(word, count)) %>%
ggplot() + aes(x = word, y = count) +
geom_col() + ggtitle("Most used words in Prince's lyrics") +
coord_flip()
install.packages("wordcloud2")
install.packages"datasets"
install.packages("datasets")
